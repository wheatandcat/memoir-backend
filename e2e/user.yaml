title: ユーザー
steps:
  - title: ユーザーを作成する
    protocol: http
    request:
      method: POST
      url: "http://{{env.HOST}}/query"
      header:
        Authorization: "Bearer {{vars.userToken}}"
        Content-Type: application/json
      body:
        query: |-
          mutation CreateAuthUser($input: NewAuthUser!) {
            createAuthUser(input: $input) {
              id
            }
          }
        variables:
          input:
            id: "{{vars.userID}}"
            isNewUser: true
    expect:
      body:
        data:
          createAuthUser:
            id: "{{vars.userID}}"
  - title: ユーザー情報を取得する①
    protocol: http
    request:
      method: POST
      url: "http://{{env.HOST}}/query"
      header:
        Authorization: "Bearer {{vars.userToken}}"
        Content-Type: application/json
      body:
        query: |-
          query User {
            user {
              id
              displayName
              image
            }
          }
        variables:
    expect:
      body:
        data:
          user:
            id: "{{vars.userID}}"
            displayName: ""
            image: ""
  - title: ユーザー認証を判定
    protocol: http
    request:
      method: POST
      url: "http://{{env.HOST}}/query"
      header:
        Authorization: "Bearer {{vars.userToken}}"
        Content-Type: application/json
      body:
        query: |-
          query ExistAuthUser {
            existAuthUser {
              exist
            }
          }
        variables:
    expect:
      body:
        data:
          existAuthUser:
            exist: true
  - title: ユーザー情報を更新する
    protocol: http
    request:
      method: POST
      url: "http://{{env.HOST}}/query"
      header:
        Authorization: "Bearer {{vars.userToken}}"
        Content-Type: application/json
      body:
        query: |-
          mutation UpdateUser($input: UpdateUser!) {
            updateUser(input: $input) {
              id
              displayName
              image
            }
          }
        variables:
          input:
            displayName: test-name
            image: https://placehold.jp/150x150.png
    expect:
      body:
        data:
          updateUser:
            id: "{{vars.userID}}"
            displayName: test-name
            image: https://placehold.jp/150x150.png
  - title: ユーザー情報を取得する②
    protocol: http
    request:
      method: POST
      url: "http://{{env.HOST}}/query"
      header:
        Authorization: "Bearer {{vars.userToken}}"
        Content-Type: application/json
      body:
        query: |-
          query User {
            user {
              id
              displayName
              image
            }
          }
        variables:
    expect:
      body:
        data:
          user:
            id: "{{vars.userID}}"
            displayName: test-name
            image: https://placehold.jp/150x150.png
