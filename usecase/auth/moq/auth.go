// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package moq

import (
	"cloud.google.com/go/firestore"
	"context"
	"github.com/wheatandcat/memoir-backend/graph/model"
	"github.com/wheatandcat/memoir-backend/repository"
	"github.com/wheatandcat/memoir-backend/usecase/auth"
	"sync"
)

// Ensure, that UseCaseMock does implement auth.UseCase.
// If this is not the case, regenerate this file with moq.
var _ auth.UseCase = &UseCaseMock{}

// UseCaseMock is a mock implementation of auth.UseCase.
//
// 	func TestSomethingThatUsesUseCase(t *testing.T) {
//
// 		// make and configure a mocked auth.UseCase
// 		mockedUseCase := &UseCaseMock{
// 			CreateAuthUserFunc: func(ctx context.Context, f *firestore.Client, input *model.NewAuthUser, u *repository.User, mu *model.AuthUser) error {
// 				panic("mock out the CreateAuthUser method")
// 			},
// 		}
//
// 		// use mockedUseCase in code that requires auth.UseCase
// 		// and then make assertions.
//
// 	}
type UseCaseMock struct {
	// CreateAuthUserFunc mocks the CreateAuthUser method.
	CreateAuthUserFunc func(ctx context.Context, f *firestore.Client, input *model.NewAuthUser, u *repository.User, mu *model.AuthUser) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateAuthUser holds details about calls to the CreateAuthUser method.
		CreateAuthUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// F is the f argument value.
			F *firestore.Client
			// Input is the input argument value.
			Input *model.NewAuthUser
			// U is the u argument value.
			U *repository.User
			// Mu is the mu argument value.
			Mu *model.AuthUser
		}
	}
	lockCreateAuthUser sync.RWMutex
}

// CreateAuthUser calls CreateAuthUserFunc.
func (mock *UseCaseMock) CreateAuthUser(ctx context.Context, f *firestore.Client, input *model.NewAuthUser, u *repository.User, mu *model.AuthUser) error {
	if mock.CreateAuthUserFunc == nil {
		panic("UseCaseMock.CreateAuthUserFunc: method is nil but UseCase.CreateAuthUser was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		F     *firestore.Client
		Input *model.NewAuthUser
		U     *repository.User
		Mu    *model.AuthUser
	}{
		Ctx:   ctx,
		F:     f,
		Input: input,
		U:     u,
		Mu:    mu,
	}
	mock.lockCreateAuthUser.Lock()
	mock.calls.CreateAuthUser = append(mock.calls.CreateAuthUser, callInfo)
	mock.lockCreateAuthUser.Unlock()
	return mock.CreateAuthUserFunc(ctx, f, input, u, mu)
}

// CreateAuthUserCalls gets all the calls that were made to CreateAuthUser.
// Check the length with:
//     len(mockedUseCase.CreateAuthUserCalls())
func (mock *UseCaseMock) CreateAuthUserCalls() []struct {
	Ctx   context.Context
	F     *firestore.Client
	Input *model.NewAuthUser
	U     *repository.User
	Mu    *model.AuthUser
} {
	var calls []struct {
		Ctx   context.Context
		F     *firestore.Client
		Input *model.NewAuthUser
		U     *repository.User
		Mu    *model.AuthUser
	}
	mock.lockCreateAuthUser.RLock()
	calls = mock.calls.CreateAuthUser
	mock.lockCreateAuthUser.RUnlock()
	return calls
}
