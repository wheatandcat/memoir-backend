// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"cloud.google.com/go/firestore"
	"context"
	"github.com/wheatandcat/memoir-backend/graph/model"
	"sync"
	"time"
)

// Ensure, that ItemRepositoryInterfaceMock does implement ItemRepositoryInterface.
// If this is not the case, regenerate this file with moq.
var _ ItemRepositoryInterface = &ItemRepositoryInterfaceMock{}

// ItemRepositoryInterfaceMock is a mock implementation of ItemRepositoryInterface.
//
// 	func TestSomethingThatUsesItemRepositoryInterface(t *testing.T) {
//
// 		// make and configure a mocked ItemRepositoryInterface
// 		mockedItemRepositoryInterface := &ItemRepositoryInterfaceMock{
// 			CreateFunc: func(ctx context.Context, f *firestore.Client, userID string, i *model.Item) error {
// 				panic("mock out the Create method")
// 			},
// 			DeleteFunc: func(ctx context.Context, f *firestore.Client, userID string, i *model.DeleteItem) error {
// 				panic("mock out the Delete method")
// 			},
// 			GetItemFunc: func(ctx context.Context, f *firestore.Client, userID string, id string) (*model.Item, error) {
// 				panic("mock out the GetItem method")
// 			},
// 			GetItemsByDateFunc: func(ctx context.Context, f *firestore.Client, userID string, date time.Time) ([]*model.Item, error) {
// 				panic("mock out the GetItemsByDate method")
// 			},
// 			GetItemsByPeriodFunc: func(ctx context.Context, f *firestore.Client, userID string, stertDate time.Time, endDate time.Time, first int, cursor ItemsByPeriodCursor) ([]*model.Item, error) {
// 				panic("mock out the GetItemsByPeriod method")
// 			},
// 			UpdateFunc: func(ctx context.Context, f *firestore.Client, userID string, i *model.UpdateItem, updatedAt time.Time) error {
// 				panic("mock out the Update method")
// 			},
// 		}
//
// 		// use mockedItemRepositoryInterface in code that requires ItemRepositoryInterface
// 		// and then make assertions.
//
// 	}
type ItemRepositoryInterfaceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, f *firestore.Client, userID string, i *model.Item) error

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, f *firestore.Client, userID string, i *model.DeleteItem) error

	// GetItemFunc mocks the GetItem method.
	GetItemFunc func(ctx context.Context, f *firestore.Client, userID string, id string) (*model.Item, error)

	// GetItemsByDateFunc mocks the GetItemsByDate method.
	GetItemsByDateFunc func(ctx context.Context, f *firestore.Client, userID string, date time.Time) ([]*model.Item, error)

	// GetItemsByPeriodFunc mocks the GetItemsByPeriod method.
	GetItemsByPeriodFunc func(ctx context.Context, f *firestore.Client, userID string, stertDate time.Time, endDate time.Time, first int, cursor ItemsByPeriodCursor) ([]*model.Item, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, f *firestore.Client, userID string, i *model.UpdateItem, updatedAt time.Time) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// F is the f argument value.
			F *firestore.Client
			// UserID is the userID argument value.
			UserID string
			// I is the i argument value.
			I *model.Item
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// F is the f argument value.
			F *firestore.Client
			// UserID is the userID argument value.
			UserID string
			// I is the i argument value.
			I *model.DeleteItem
		}
		// GetItem holds details about calls to the GetItem method.
		GetItem []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// F is the f argument value.
			F *firestore.Client
			// UserID is the userID argument value.
			UserID string
			// ID is the id argument value.
			ID string
		}
		// GetItemsByDate holds details about calls to the GetItemsByDate method.
		GetItemsByDate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// F is the f argument value.
			F *firestore.Client
			// UserID is the userID argument value.
			UserID string
			// Date is the date argument value.
			Date time.Time
		}
		// GetItemsByPeriod holds details about calls to the GetItemsByPeriod method.
		GetItemsByPeriod []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// F is the f argument value.
			F *firestore.Client
			// UserID is the userID argument value.
			UserID string
			// StertDate is the stertDate argument value.
			StertDate time.Time
			// EndDate is the endDate argument value.
			EndDate time.Time
			// First is the first argument value.
			First int
			// Cursor is the cursor argument value.
			Cursor ItemsByPeriodCursor
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// F is the f argument value.
			F *firestore.Client
			// UserID is the userID argument value.
			UserID string
			// I is the i argument value.
			I *model.UpdateItem
			// UpdatedAt is the updatedAt argument value.
			UpdatedAt time.Time
		}
	}
	lockCreate           sync.RWMutex
	lockDelete           sync.RWMutex
	lockGetItem          sync.RWMutex
	lockGetItemsByDate   sync.RWMutex
	lockGetItemsByPeriod sync.RWMutex
	lockUpdate           sync.RWMutex
}

// Create calls CreateFunc.
func (mock *ItemRepositoryInterfaceMock) Create(ctx context.Context, f *firestore.Client, userID string, i *model.Item) error {
	if mock.CreateFunc == nil {
		panic("ItemRepositoryInterfaceMock.CreateFunc: method is nil but ItemRepositoryInterface.Create was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		F      *firestore.Client
		UserID string
		I      *model.Item
	}{
		Ctx:    ctx,
		F:      f,
		UserID: userID,
		I:      i,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, f, userID, i)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedItemRepositoryInterface.CreateCalls())
func (mock *ItemRepositoryInterfaceMock) CreateCalls() []struct {
	Ctx    context.Context
	F      *firestore.Client
	UserID string
	I      *model.Item
} {
	var calls []struct {
		Ctx    context.Context
		F      *firestore.Client
		UserID string
		I      *model.Item
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ItemRepositoryInterfaceMock) Delete(ctx context.Context, f *firestore.Client, userID string, i *model.DeleteItem) error {
	if mock.DeleteFunc == nil {
		panic("ItemRepositoryInterfaceMock.DeleteFunc: method is nil but ItemRepositoryInterface.Delete was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		F      *firestore.Client
		UserID string
		I      *model.DeleteItem
	}{
		Ctx:    ctx,
		F:      f,
		UserID: userID,
		I:      i,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, f, userID, i)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedItemRepositoryInterface.DeleteCalls())
func (mock *ItemRepositoryInterfaceMock) DeleteCalls() []struct {
	Ctx    context.Context
	F      *firestore.Client
	UserID string
	I      *model.DeleteItem
} {
	var calls []struct {
		Ctx    context.Context
		F      *firestore.Client
		UserID string
		I      *model.DeleteItem
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// GetItem calls GetItemFunc.
func (mock *ItemRepositoryInterfaceMock) GetItem(ctx context.Context, f *firestore.Client, userID string, id string) (*model.Item, error) {
	if mock.GetItemFunc == nil {
		panic("ItemRepositoryInterfaceMock.GetItemFunc: method is nil but ItemRepositoryInterface.GetItem was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		F      *firestore.Client
		UserID string
		ID     string
	}{
		Ctx:    ctx,
		F:      f,
		UserID: userID,
		ID:     id,
	}
	mock.lockGetItem.Lock()
	mock.calls.GetItem = append(mock.calls.GetItem, callInfo)
	mock.lockGetItem.Unlock()
	return mock.GetItemFunc(ctx, f, userID, id)
}

// GetItemCalls gets all the calls that were made to GetItem.
// Check the length with:
//     len(mockedItemRepositoryInterface.GetItemCalls())
func (mock *ItemRepositoryInterfaceMock) GetItemCalls() []struct {
	Ctx    context.Context
	F      *firestore.Client
	UserID string
	ID     string
} {
	var calls []struct {
		Ctx    context.Context
		F      *firestore.Client
		UserID string
		ID     string
	}
	mock.lockGetItem.RLock()
	calls = mock.calls.GetItem
	mock.lockGetItem.RUnlock()
	return calls
}

// GetItemsByDate calls GetItemsByDateFunc.
func (mock *ItemRepositoryInterfaceMock) GetItemsByDate(ctx context.Context, f *firestore.Client, userID string, date time.Time) ([]*model.Item, error) {
	if mock.GetItemsByDateFunc == nil {
		panic("ItemRepositoryInterfaceMock.GetItemsByDateFunc: method is nil but ItemRepositoryInterface.GetItemsByDate was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		F      *firestore.Client
		UserID string
		Date   time.Time
	}{
		Ctx:    ctx,
		F:      f,
		UserID: userID,
		Date:   date,
	}
	mock.lockGetItemsByDate.Lock()
	mock.calls.GetItemsByDate = append(mock.calls.GetItemsByDate, callInfo)
	mock.lockGetItemsByDate.Unlock()
	return mock.GetItemsByDateFunc(ctx, f, userID, date)
}

// GetItemsByDateCalls gets all the calls that were made to GetItemsByDate.
// Check the length with:
//     len(mockedItemRepositoryInterface.GetItemsByDateCalls())
func (mock *ItemRepositoryInterfaceMock) GetItemsByDateCalls() []struct {
	Ctx    context.Context
	F      *firestore.Client
	UserID string
	Date   time.Time
} {
	var calls []struct {
		Ctx    context.Context
		F      *firestore.Client
		UserID string
		Date   time.Time
	}
	mock.lockGetItemsByDate.RLock()
	calls = mock.calls.GetItemsByDate
	mock.lockGetItemsByDate.RUnlock()
	return calls
}

// GetItemsByPeriod calls GetItemsByPeriodFunc.
func (mock *ItemRepositoryInterfaceMock) GetItemsByPeriod(ctx context.Context, f *firestore.Client, userID string, stertDate time.Time, endDate time.Time, first int, cursor ItemsByPeriodCursor) ([]*model.Item, error) {
	if mock.GetItemsByPeriodFunc == nil {
		panic("ItemRepositoryInterfaceMock.GetItemsByPeriodFunc: method is nil but ItemRepositoryInterface.GetItemsByPeriod was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		F         *firestore.Client
		UserID    string
		StertDate time.Time
		EndDate   time.Time
		First     int
		Cursor    ItemsByPeriodCursor
	}{
		Ctx:       ctx,
		F:         f,
		UserID:    userID,
		StertDate: stertDate,
		EndDate:   endDate,
		First:     first,
		Cursor:    cursor,
	}
	mock.lockGetItemsByPeriod.Lock()
	mock.calls.GetItemsByPeriod = append(mock.calls.GetItemsByPeriod, callInfo)
	mock.lockGetItemsByPeriod.Unlock()
	return mock.GetItemsByPeriodFunc(ctx, f, userID, stertDate, endDate, first, cursor)
}

// GetItemsByPeriodCalls gets all the calls that were made to GetItemsByPeriod.
// Check the length with:
//     len(mockedItemRepositoryInterface.GetItemsByPeriodCalls())
func (mock *ItemRepositoryInterfaceMock) GetItemsByPeriodCalls() []struct {
	Ctx       context.Context
	F         *firestore.Client
	UserID    string
	StertDate time.Time
	EndDate   time.Time
	First     int
	Cursor    ItemsByPeriodCursor
} {
	var calls []struct {
		Ctx       context.Context
		F         *firestore.Client
		UserID    string
		StertDate time.Time
		EndDate   time.Time
		First     int
		Cursor    ItemsByPeriodCursor
	}
	mock.lockGetItemsByPeriod.RLock()
	calls = mock.calls.GetItemsByPeriod
	mock.lockGetItemsByPeriod.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ItemRepositoryInterfaceMock) Update(ctx context.Context, f *firestore.Client, userID string, i *model.UpdateItem, updatedAt time.Time) error {
	if mock.UpdateFunc == nil {
		panic("ItemRepositoryInterfaceMock.UpdateFunc: method is nil but ItemRepositoryInterface.Update was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		F         *firestore.Client
		UserID    string
		I         *model.UpdateItem
		UpdatedAt time.Time
	}{
		Ctx:       ctx,
		F:         f,
		UserID:    userID,
		I:         i,
		UpdatedAt: updatedAt,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, f, userID, i, updatedAt)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedItemRepositoryInterface.UpdateCalls())
func (mock *ItemRepositoryInterfaceMock) UpdateCalls() []struct {
	Ctx       context.Context
	F         *firestore.Client
	UserID    string
	I         *model.UpdateItem
	UpdatedAt time.Time
} {
	var calls []struct {
		Ctx       context.Context
		F         *firestore.Client
		UserID    string
		I         *model.UpdateItem
		UpdatedAt time.Time
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

// Ensure, that UserRepositoryInterfaceMock does implement UserRepositoryInterface.
// If this is not the case, regenerate this file with moq.
var _ UserRepositoryInterface = &UserRepositoryInterfaceMock{}

// UserRepositoryInterfaceMock is a mock implementation of UserRepositoryInterface.
//
// 	func TestSomethingThatUsesUserRepositoryInterface(t *testing.T) {
//
// 		// make and configure a mocked UserRepositoryInterface
// 		mockedUserRepositoryInterface := &UserRepositoryInterfaceMock{
// 			CreateFunc: func(ctx context.Context, f *firestore.Client, u *model.User) error {
// 				panic("mock out the Create method")
// 			},
// 			FindByUIDFunc: func(ctx context.Context, f *firestore.Client, uid string) (*model.User, error) {
// 				panic("mock out the FindByUID method")
// 			},
// 		}
//
// 		// use mockedUserRepositoryInterface in code that requires UserRepositoryInterface
// 		// and then make assertions.
//
// 	}
type UserRepositoryInterfaceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, f *firestore.Client, u *model.User) error

	// FindByUIDFunc mocks the FindByUID method.
	FindByUIDFunc func(ctx context.Context, f *firestore.Client, uid string) (*model.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// F is the f argument value.
			F *firestore.Client
			// U is the u argument value.
			U *model.User
		}
		// FindByUID holds details about calls to the FindByUID method.
		FindByUID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// F is the f argument value.
			F *firestore.Client
			// UID is the uid argument value.
			UID string
		}
	}
	lockCreate    sync.RWMutex
	lockFindByUID sync.RWMutex
}

// Create calls CreateFunc.
func (mock *UserRepositoryInterfaceMock) Create(ctx context.Context, f *firestore.Client, u *model.User) error {
	if mock.CreateFunc == nil {
		panic("UserRepositoryInterfaceMock.CreateFunc: method is nil but UserRepositoryInterface.Create was just called")
	}
	callInfo := struct {
		Ctx context.Context
		F   *firestore.Client
		U   *model.User
	}{
		Ctx: ctx,
		F:   f,
		U:   u,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, f, u)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedUserRepositoryInterface.CreateCalls())
func (mock *UserRepositoryInterfaceMock) CreateCalls() []struct {
	Ctx context.Context
	F   *firestore.Client
	U   *model.User
} {
	var calls []struct {
		Ctx context.Context
		F   *firestore.Client
		U   *model.User
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// FindByUID calls FindByUIDFunc.
func (mock *UserRepositoryInterfaceMock) FindByUID(ctx context.Context, f *firestore.Client, uid string) (*model.User, error) {
	if mock.FindByUIDFunc == nil {
		panic("UserRepositoryInterfaceMock.FindByUIDFunc: method is nil but UserRepositoryInterface.FindByUID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		F   *firestore.Client
		UID string
	}{
		Ctx: ctx,
		F:   f,
		UID: uid,
	}
	mock.lockFindByUID.Lock()
	mock.calls.FindByUID = append(mock.calls.FindByUID, callInfo)
	mock.lockFindByUID.Unlock()
	return mock.FindByUIDFunc(ctx, f, uid)
}

// FindByUIDCalls gets all the calls that were made to FindByUID.
// Check the length with:
//     len(mockedUserRepositoryInterface.FindByUIDCalls())
func (mock *UserRepositoryInterfaceMock) FindByUIDCalls() []struct {
	Ctx context.Context
	F   *firestore.Client
	UID string
} {
	var calls []struct {
		Ctx context.Context
		F   *firestore.Client
		UID string
	}
	mock.lockFindByUID.RLock()
	calls = mock.calls.FindByUID
	mock.lockFindByUID.RUnlock()
	return calls
}
