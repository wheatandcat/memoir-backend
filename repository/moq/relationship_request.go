// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package moqs

import (
	"cloud.google.com/go/firestore"
	"context"
	"github.com/wheatandcat/memoir-backend/graph/model"
	"github.com/wheatandcat/memoir-backend/repository"
	"sync"
)

// Ensure, that RelationshipRequestInterfaceMock does implement repository.RelationshipRequestInterface.
// If this is not the case, regenerate this file with moq.
var _ repository.RelationshipRequestInterface = &RelationshipRequestInterfaceMock{}

// RelationshipRequestInterfaceMock is a mock implementation of repository.RelationshipRequestInterface.
//
// 	func TestSomethingThatUsesRelationshipRequestInterface(t *testing.T) {
//
// 		// make and configure a mocked repository.RelationshipRequestInterface
// 		mockedRelationshipRequestInterface := &RelationshipRequestInterfaceMock{
// 			CreateFunc: func(ctx context.Context, f *firestore.Client, i *model.RelationshipRequest) error {
// 				panic("mock out the Create method")
// 			},
// 			DeleteByFollowedIDFunc: func(ctx context.Context, f *firestore.Client, batch *firestore.WriteBatch, userID string) error {
// 				panic("mock out the DeleteByFollowedID method")
// 			},
// 			DeleteByFollowerIDFunc: func(ctx context.Context, f *firestore.Client, batch *firestore.WriteBatch, userID string) error {
// 				panic("mock out the DeleteByFollowerID method")
// 			},
// 			FindFunc: func(ctx context.Context, f *firestore.Client, i *model.RelationshipRequest) (*model.RelationshipRequest, error) {
// 				panic("mock out the Find method")
// 			},
// 			FindByFollowedIDFunc: func(ctx context.Context, f *firestore.Client, userID string, first int, cursor repository.RelationshipRequestCursor) ([]*model.RelationshipRequest, error) {
// 				panic("mock out the FindByFollowedID method")
// 			},
// 			UpdateFunc: func(ctx context.Context, f *firestore.Client, batch *firestore.WriteBatch, i *model.RelationshipRequest)  {
// 				panic("mock out the Update method")
// 			},
// 		}
//
// 		// use mockedRelationshipRequestInterface in code that requires repository.RelationshipRequestInterface
// 		// and then make assertions.
//
// 	}
type RelationshipRequestInterfaceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, f *firestore.Client, i *model.RelationshipRequest) error

	// DeleteByFollowedIDFunc mocks the DeleteByFollowedID method.
	DeleteByFollowedIDFunc func(ctx context.Context, f *firestore.Client, batch *firestore.WriteBatch, userID string) error

	// DeleteByFollowerIDFunc mocks the DeleteByFollowerID method.
	DeleteByFollowerIDFunc func(ctx context.Context, f *firestore.Client, batch *firestore.WriteBatch, userID string) error

	// FindFunc mocks the Find method.
	FindFunc func(ctx context.Context, f *firestore.Client, i *model.RelationshipRequest) (*model.RelationshipRequest, error)

	// FindByFollowedIDFunc mocks the FindByFollowedID method.
	FindByFollowedIDFunc func(ctx context.Context, f *firestore.Client, userID string, first int, cursor repository.RelationshipRequestCursor) ([]*model.RelationshipRequest, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, f *firestore.Client, batch *firestore.WriteBatch, i *model.RelationshipRequest)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// F is the f argument value.
			F *firestore.Client
			// I is the i argument value.
			I *model.RelationshipRequest
		}
		// DeleteByFollowedID holds details about calls to the DeleteByFollowedID method.
		DeleteByFollowedID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// F is the f argument value.
			F *firestore.Client
			// Batch is the batch argument value.
			Batch *firestore.WriteBatch
			// UserID is the userID argument value.
			UserID string
		}
		// DeleteByFollowerID holds details about calls to the DeleteByFollowerID method.
		DeleteByFollowerID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// F is the f argument value.
			F *firestore.Client
			// Batch is the batch argument value.
			Batch *firestore.WriteBatch
			// UserID is the userID argument value.
			UserID string
		}
		// Find holds details about calls to the Find method.
		Find []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// F is the f argument value.
			F *firestore.Client
			// I is the i argument value.
			I *model.RelationshipRequest
		}
		// FindByFollowedID holds details about calls to the FindByFollowedID method.
		FindByFollowedID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// F is the f argument value.
			F *firestore.Client
			// UserID is the userID argument value.
			UserID string
			// First is the first argument value.
			First int
			// Cursor is the cursor argument value.
			Cursor repository.RelationshipRequestCursor
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// F is the f argument value.
			F *firestore.Client
			// Batch is the batch argument value.
			Batch *firestore.WriteBatch
			// I is the i argument value.
			I *model.RelationshipRequest
		}
	}
	lockCreate             sync.RWMutex
	lockDeleteByFollowedID sync.RWMutex
	lockDeleteByFollowerID sync.RWMutex
	lockFind               sync.RWMutex
	lockFindByFollowedID   sync.RWMutex
	lockUpdate             sync.RWMutex
}

// Create calls CreateFunc.
func (mock *RelationshipRequestInterfaceMock) Create(ctx context.Context, f *firestore.Client, i *model.RelationshipRequest) error {
	if mock.CreateFunc == nil {
		panic("RelationshipRequestInterfaceMock.CreateFunc: method is nil but RelationshipRequestInterface.Create was just called")
	}
	callInfo := struct {
		Ctx context.Context
		F   *firestore.Client
		I   *model.RelationshipRequest
	}{
		Ctx: ctx,
		F:   f,
		I:   i,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, f, i)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedRelationshipRequestInterface.CreateCalls())
func (mock *RelationshipRequestInterfaceMock) CreateCalls() []struct {
	Ctx context.Context
	F   *firestore.Client
	I   *model.RelationshipRequest
} {
	var calls []struct {
		Ctx context.Context
		F   *firestore.Client
		I   *model.RelationshipRequest
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// DeleteByFollowedID calls DeleteByFollowedIDFunc.
func (mock *RelationshipRequestInterfaceMock) DeleteByFollowedID(ctx context.Context, f *firestore.Client, batch *firestore.WriteBatch, userID string) error {
	if mock.DeleteByFollowedIDFunc == nil {
		panic("RelationshipRequestInterfaceMock.DeleteByFollowedIDFunc: method is nil but RelationshipRequestInterface.DeleteByFollowedID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		F      *firestore.Client
		Batch  *firestore.WriteBatch
		UserID string
	}{
		Ctx:    ctx,
		F:      f,
		Batch:  batch,
		UserID: userID,
	}
	mock.lockDeleteByFollowedID.Lock()
	mock.calls.DeleteByFollowedID = append(mock.calls.DeleteByFollowedID, callInfo)
	mock.lockDeleteByFollowedID.Unlock()
	return mock.DeleteByFollowedIDFunc(ctx, f, batch, userID)
}

// DeleteByFollowedIDCalls gets all the calls that were made to DeleteByFollowedID.
// Check the length with:
//     len(mockedRelationshipRequestInterface.DeleteByFollowedIDCalls())
func (mock *RelationshipRequestInterfaceMock) DeleteByFollowedIDCalls() []struct {
	Ctx    context.Context
	F      *firestore.Client
	Batch  *firestore.WriteBatch
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		F      *firestore.Client
		Batch  *firestore.WriteBatch
		UserID string
	}
	mock.lockDeleteByFollowedID.RLock()
	calls = mock.calls.DeleteByFollowedID
	mock.lockDeleteByFollowedID.RUnlock()
	return calls
}

// DeleteByFollowerID calls DeleteByFollowerIDFunc.
func (mock *RelationshipRequestInterfaceMock) DeleteByFollowerID(ctx context.Context, f *firestore.Client, batch *firestore.WriteBatch, userID string) error {
	if mock.DeleteByFollowerIDFunc == nil {
		panic("RelationshipRequestInterfaceMock.DeleteByFollowerIDFunc: method is nil but RelationshipRequestInterface.DeleteByFollowerID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		F      *firestore.Client
		Batch  *firestore.WriteBatch
		UserID string
	}{
		Ctx:    ctx,
		F:      f,
		Batch:  batch,
		UserID: userID,
	}
	mock.lockDeleteByFollowerID.Lock()
	mock.calls.DeleteByFollowerID = append(mock.calls.DeleteByFollowerID, callInfo)
	mock.lockDeleteByFollowerID.Unlock()
	return mock.DeleteByFollowerIDFunc(ctx, f, batch, userID)
}

// DeleteByFollowerIDCalls gets all the calls that were made to DeleteByFollowerID.
// Check the length with:
//     len(mockedRelationshipRequestInterface.DeleteByFollowerIDCalls())
func (mock *RelationshipRequestInterfaceMock) DeleteByFollowerIDCalls() []struct {
	Ctx    context.Context
	F      *firestore.Client
	Batch  *firestore.WriteBatch
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		F      *firestore.Client
		Batch  *firestore.WriteBatch
		UserID string
	}
	mock.lockDeleteByFollowerID.RLock()
	calls = mock.calls.DeleteByFollowerID
	mock.lockDeleteByFollowerID.RUnlock()
	return calls
}

// Find calls FindFunc.
func (mock *RelationshipRequestInterfaceMock) Find(ctx context.Context, f *firestore.Client, i *model.RelationshipRequest) (*model.RelationshipRequest, error) {
	if mock.FindFunc == nil {
		panic("RelationshipRequestInterfaceMock.FindFunc: method is nil but RelationshipRequestInterface.Find was just called")
	}
	callInfo := struct {
		Ctx context.Context
		F   *firestore.Client
		I   *model.RelationshipRequest
	}{
		Ctx: ctx,
		F:   f,
		I:   i,
	}
	mock.lockFind.Lock()
	mock.calls.Find = append(mock.calls.Find, callInfo)
	mock.lockFind.Unlock()
	return mock.FindFunc(ctx, f, i)
}

// FindCalls gets all the calls that were made to Find.
// Check the length with:
//     len(mockedRelationshipRequestInterface.FindCalls())
func (mock *RelationshipRequestInterfaceMock) FindCalls() []struct {
	Ctx context.Context
	F   *firestore.Client
	I   *model.RelationshipRequest
} {
	var calls []struct {
		Ctx context.Context
		F   *firestore.Client
		I   *model.RelationshipRequest
	}
	mock.lockFind.RLock()
	calls = mock.calls.Find
	mock.lockFind.RUnlock()
	return calls
}

// FindByFollowedID calls FindByFollowedIDFunc.
func (mock *RelationshipRequestInterfaceMock) FindByFollowedID(ctx context.Context, f *firestore.Client, userID string, first int, cursor repository.RelationshipRequestCursor) ([]*model.RelationshipRequest, error) {
	if mock.FindByFollowedIDFunc == nil {
		panic("RelationshipRequestInterfaceMock.FindByFollowedIDFunc: method is nil but RelationshipRequestInterface.FindByFollowedID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		F      *firestore.Client
		UserID string
		First  int
		Cursor repository.RelationshipRequestCursor
	}{
		Ctx:    ctx,
		F:      f,
		UserID: userID,
		First:  first,
		Cursor: cursor,
	}
	mock.lockFindByFollowedID.Lock()
	mock.calls.FindByFollowedID = append(mock.calls.FindByFollowedID, callInfo)
	mock.lockFindByFollowedID.Unlock()
	return mock.FindByFollowedIDFunc(ctx, f, userID, first, cursor)
}

// FindByFollowedIDCalls gets all the calls that were made to FindByFollowedID.
// Check the length with:
//     len(mockedRelationshipRequestInterface.FindByFollowedIDCalls())
func (mock *RelationshipRequestInterfaceMock) FindByFollowedIDCalls() []struct {
	Ctx    context.Context
	F      *firestore.Client
	UserID string
	First  int
	Cursor repository.RelationshipRequestCursor
} {
	var calls []struct {
		Ctx    context.Context
		F      *firestore.Client
		UserID string
		First  int
		Cursor repository.RelationshipRequestCursor
	}
	mock.lockFindByFollowedID.RLock()
	calls = mock.calls.FindByFollowedID
	mock.lockFindByFollowedID.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *RelationshipRequestInterfaceMock) Update(ctx context.Context, f *firestore.Client, batch *firestore.WriteBatch, i *model.RelationshipRequest) {
	if mock.UpdateFunc == nil {
		panic("RelationshipRequestInterfaceMock.UpdateFunc: method is nil but RelationshipRequestInterface.Update was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		F     *firestore.Client
		Batch *firestore.WriteBatch
		I     *model.RelationshipRequest
	}{
		Ctx:   ctx,
		F:     f,
		Batch: batch,
		I:     i,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	mock.UpdateFunc(ctx, f, batch, i)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedRelationshipRequestInterface.UpdateCalls())
func (mock *RelationshipRequestInterfaceMock) UpdateCalls() []struct {
	Ctx   context.Context
	F     *firestore.Client
	Batch *firestore.WriteBatch
	I     *model.RelationshipRequest
} {
	var calls []struct {
		Ctx   context.Context
		F     *firestore.Client
		Batch *firestore.WriteBatch
		I     *model.RelationshipRequest
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
