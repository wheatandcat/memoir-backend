// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package moqs

import (
	"cloud.google.com/go/firestore"
	"context"
	"github.com/wheatandcat/memoir-backend/graph/model"
	"github.com/wheatandcat/memoir-backend/repository"
	"sync"
)

// Ensure, that InviteRepositoryInterfaceMock does implement repository.InviteRepositoryInterface.
// If this is not the case, regenerate this file with moq.
var _ repository.InviteRepositoryInterface = &InviteRepositoryInterfaceMock{}

// InviteRepositoryInterfaceMock is a mock implementation of repository.InviteRepositoryInterface.
//
//	func TestSomethingThatUsesInviteRepositoryInterface(t *testing.T) {
//
//		// make and configure a mocked repository.InviteRepositoryInterface
//		mockedInviteRepositoryInterface := &InviteRepositoryInterfaceMock{
//			CreateFunc: func(ctx context.Context, f *firestore.Client, tx *firestore.Transaction, i *model.Invite) error {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(ctx context.Context, f *firestore.Client, tx *firestore.Transaction, code string) error {
//				panic("mock out the Delete method")
//			},
//			DeleteByUserIDFunc: func(ctx context.Context, f *firestore.Client, tx *firestore.Transaction, userID string) error {
//				panic("mock out the DeleteByUserID method")
//			},
//			FindFunc: func(ctx context.Context, f *firestore.Client, code string) (*model.Invite, error) {
//				panic("mock out the Find method")
//			},
//			FindByUserIDFunc: func(ctx context.Context, f *firestore.Client, userID string) (*model.Invite, error) {
//				panic("mock out the FindByUserID method")
//			},
//		}
//
//		// use mockedInviteRepositoryInterface in code that requires repository.InviteRepositoryInterface
//		// and then make assertions.
//
//	}
type InviteRepositoryInterfaceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, f *firestore.Client, tx *firestore.Transaction, i *model.Invite) error

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, f *firestore.Client, tx *firestore.Transaction, code string) error

	// DeleteByUserIDFunc mocks the DeleteByUserID method.
	DeleteByUserIDFunc func(ctx context.Context, f *firestore.Client, tx *firestore.Transaction, userID string) error

	// FindFunc mocks the Find method.
	FindFunc func(ctx context.Context, f *firestore.Client, code string) (*model.Invite, error)

	// FindByUserIDFunc mocks the FindByUserID method.
	FindByUserIDFunc func(ctx context.Context, f *firestore.Client, userID string) (*model.Invite, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// F is the f argument value.
			F *firestore.Client
			// Tx is the tx argument value.
			Tx *firestore.Transaction
			// I is the i argument value.
			I *model.Invite
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// F is the f argument value.
			F *firestore.Client
			// Tx is the tx argument value.
			Tx *firestore.Transaction
			// Code is the code argument value.
			Code string
		}
		// DeleteByUserID holds details about calls to the DeleteByUserID method.
		DeleteByUserID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// F is the f argument value.
			F *firestore.Client
			// Tx is the tx argument value.
			Tx *firestore.Transaction
			// UserID is the userID argument value.
			UserID string
		}
		// Find holds details about calls to the Find method.
		Find []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// F is the f argument value.
			F *firestore.Client
			// Code is the code argument value.
			Code string
		}
		// FindByUserID holds details about calls to the FindByUserID method.
		FindByUserID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// F is the f argument value.
			F *firestore.Client
			// UserID is the userID argument value.
			UserID string
		}
	}
	lockCreate         sync.RWMutex
	lockDelete         sync.RWMutex
	lockDeleteByUserID sync.RWMutex
	lockFind           sync.RWMutex
	lockFindByUserID   sync.RWMutex
}

// Create calls CreateFunc.
func (mock *InviteRepositoryInterfaceMock) Create(ctx context.Context, f *firestore.Client, tx *firestore.Transaction, i *model.Invite) error {
	if mock.CreateFunc == nil {
		panic("InviteRepositoryInterfaceMock.CreateFunc: method is nil but InviteRepositoryInterface.Create was just called")
	}
	callInfo := struct {
		Ctx context.Context
		F   *firestore.Client
		Tx  *firestore.Transaction
		I   *model.Invite
	}{
		Ctx: ctx,
		F:   f,
		Tx:  tx,
		I:   i,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, f, tx, i)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedInviteRepositoryInterface.CreateCalls())
func (mock *InviteRepositoryInterfaceMock) CreateCalls() []struct {
	Ctx context.Context
	F   *firestore.Client
	Tx  *firestore.Transaction
	I   *model.Invite
} {
	var calls []struct {
		Ctx context.Context
		F   *firestore.Client
		Tx  *firestore.Transaction
		I   *model.Invite
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *InviteRepositoryInterfaceMock) Delete(ctx context.Context, f *firestore.Client, tx *firestore.Transaction, code string) error {
	if mock.DeleteFunc == nil {
		panic("InviteRepositoryInterfaceMock.DeleteFunc: method is nil but InviteRepositoryInterface.Delete was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		F    *firestore.Client
		Tx   *firestore.Transaction
		Code string
	}{
		Ctx:  ctx,
		F:    f,
		Tx:   tx,
		Code: code,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, f, tx, code)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedInviteRepositoryInterface.DeleteCalls())
func (mock *InviteRepositoryInterfaceMock) DeleteCalls() []struct {
	Ctx  context.Context
	F    *firestore.Client
	Tx   *firestore.Transaction
	Code string
} {
	var calls []struct {
		Ctx  context.Context
		F    *firestore.Client
		Tx   *firestore.Transaction
		Code string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// DeleteByUserID calls DeleteByUserIDFunc.
func (mock *InviteRepositoryInterfaceMock) DeleteByUserID(ctx context.Context, f *firestore.Client, tx *firestore.Transaction, userID string) error {
	if mock.DeleteByUserIDFunc == nil {
		panic("InviteRepositoryInterfaceMock.DeleteByUserIDFunc: method is nil but InviteRepositoryInterface.DeleteByUserID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		F      *firestore.Client
		Tx     *firestore.Transaction
		UserID string
	}{
		Ctx:    ctx,
		F:      f,
		Tx:     tx,
		UserID: userID,
	}
	mock.lockDeleteByUserID.Lock()
	mock.calls.DeleteByUserID = append(mock.calls.DeleteByUserID, callInfo)
	mock.lockDeleteByUserID.Unlock()
	return mock.DeleteByUserIDFunc(ctx, f, tx, userID)
}

// DeleteByUserIDCalls gets all the calls that were made to DeleteByUserID.
// Check the length with:
//
//	len(mockedInviteRepositoryInterface.DeleteByUserIDCalls())
func (mock *InviteRepositoryInterfaceMock) DeleteByUserIDCalls() []struct {
	Ctx    context.Context
	F      *firestore.Client
	Tx     *firestore.Transaction
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		F      *firestore.Client
		Tx     *firestore.Transaction
		UserID string
	}
	mock.lockDeleteByUserID.RLock()
	calls = mock.calls.DeleteByUserID
	mock.lockDeleteByUserID.RUnlock()
	return calls
}

// Find calls FindFunc.
func (mock *InviteRepositoryInterfaceMock) Find(ctx context.Context, f *firestore.Client, code string) (*model.Invite, error) {
	if mock.FindFunc == nil {
		panic("InviteRepositoryInterfaceMock.FindFunc: method is nil but InviteRepositoryInterface.Find was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		F    *firestore.Client
		Code string
	}{
		Ctx:  ctx,
		F:    f,
		Code: code,
	}
	mock.lockFind.Lock()
	mock.calls.Find = append(mock.calls.Find, callInfo)
	mock.lockFind.Unlock()
	return mock.FindFunc(ctx, f, code)
}

// FindCalls gets all the calls that were made to Find.
// Check the length with:
//
//	len(mockedInviteRepositoryInterface.FindCalls())
func (mock *InviteRepositoryInterfaceMock) FindCalls() []struct {
	Ctx  context.Context
	F    *firestore.Client
	Code string
} {
	var calls []struct {
		Ctx  context.Context
		F    *firestore.Client
		Code string
	}
	mock.lockFind.RLock()
	calls = mock.calls.Find
	mock.lockFind.RUnlock()
	return calls
}

// FindByUserID calls FindByUserIDFunc.
func (mock *InviteRepositoryInterfaceMock) FindByUserID(ctx context.Context, f *firestore.Client, userID string) (*model.Invite, error) {
	if mock.FindByUserIDFunc == nil {
		panic("InviteRepositoryInterfaceMock.FindByUserIDFunc: method is nil but InviteRepositoryInterface.FindByUserID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		F      *firestore.Client
		UserID string
	}{
		Ctx:    ctx,
		F:      f,
		UserID: userID,
	}
	mock.lockFindByUserID.Lock()
	mock.calls.FindByUserID = append(mock.calls.FindByUserID, callInfo)
	mock.lockFindByUserID.Unlock()
	return mock.FindByUserIDFunc(ctx, f, userID)
}

// FindByUserIDCalls gets all the calls that were made to FindByUserID.
// Check the length with:
//
//	len(mockedInviteRepositoryInterface.FindByUserIDCalls())
func (mock *InviteRepositoryInterfaceMock) FindByUserIDCalls() []struct {
	Ctx    context.Context
	F      *firestore.Client
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		F      *firestore.Client
		UserID string
	}
	mock.lockFindByUserID.RLock()
	calls = mock.calls.FindByUserID
	mock.lockFindByUserID.RUnlock()
	return calls
}
