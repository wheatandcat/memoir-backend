// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package moqs

import (
	"cloud.google.com/go/firestore"
	"context"
	"github.com/wheatandcat/memoir-backend/graph/model"
	"github.com/wheatandcat/memoir-backend/repository"
	"sync"
)

// Ensure, that RelationshipInterfaceMock does implement repository.RelationshipInterface.
// If this is not the case, regenerate this file with moq.
var _ repository.RelationshipInterface = &RelationshipInterfaceMock{}

// RelationshipInterfaceMock is a mock implementation of repository.RelationshipInterface.
//
// 	func TestSomethingThatUsesRelationshipInterface(t *testing.T) {
//
// 		// make and configure a mocked repository.RelationshipInterface
// 		mockedRelationshipInterface := &RelationshipInterfaceMock{
// 			CreateFunc: func(ctx context.Context, f *firestore.Client, batch *firestore.WriteBatch, i *model.Relationship)  {
// 				panic("mock out the Create method")
// 			},
// 			DeleteFunc: func(ctx context.Context, f *firestore.Client, batch *firestore.WriteBatch, i *model.Relationship)  {
// 				panic("mock out the Delete method")
// 			},
// 			FindByFollowedIDFunc: func(ctx context.Context, f *firestore.Client, userID string, first int, cursor repository.RelationshipCursor) ([]*model.Relationship, error) {
// 				panic("mock out the FindByFollowedID method")
// 			},
// 		}
//
// 		// use mockedRelationshipInterface in code that requires repository.RelationshipInterface
// 		// and then make assertions.
//
// 	}
type RelationshipInterfaceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, f *firestore.Client, batch *firestore.WriteBatch, i *model.Relationship)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, f *firestore.Client, batch *firestore.WriteBatch, i *model.Relationship)

	// FindByFollowedIDFunc mocks the FindByFollowedID method.
	FindByFollowedIDFunc func(ctx context.Context, f *firestore.Client, userID string, first int, cursor repository.RelationshipCursor) ([]*model.Relationship, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// F is the f argument value.
			F *firestore.Client
			// Batch is the batch argument value.
			Batch *firestore.WriteBatch
			// I is the i argument value.
			I *model.Relationship
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// F is the f argument value.
			F *firestore.Client
			// Batch is the batch argument value.
			Batch *firestore.WriteBatch
			// I is the i argument value.
			I *model.Relationship
		}
		// FindByFollowedID holds details about calls to the FindByFollowedID method.
		FindByFollowedID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// F is the f argument value.
			F *firestore.Client
			// UserID is the userID argument value.
			UserID string
			// First is the first argument value.
			First int
			// Cursor is the cursor argument value.
			Cursor repository.RelationshipCursor
		}
	}
	lockCreate           sync.RWMutex
	lockDelete           sync.RWMutex
	lockFindByFollowedID sync.RWMutex
}

// Create calls CreateFunc.
func (mock *RelationshipInterfaceMock) Create(ctx context.Context, f *firestore.Client, batch *firestore.WriteBatch, i *model.Relationship) {
	if mock.CreateFunc == nil {
		panic("RelationshipInterfaceMock.CreateFunc: method is nil but RelationshipInterface.Create was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		F     *firestore.Client
		Batch *firestore.WriteBatch
		I     *model.Relationship
	}{
		Ctx:   ctx,
		F:     f,
		Batch: batch,
		I:     i,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	mock.CreateFunc(ctx, f, batch, i)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedRelationshipInterface.CreateCalls())
func (mock *RelationshipInterfaceMock) CreateCalls() []struct {
	Ctx   context.Context
	F     *firestore.Client
	Batch *firestore.WriteBatch
	I     *model.Relationship
} {
	var calls []struct {
		Ctx   context.Context
		F     *firestore.Client
		Batch *firestore.WriteBatch
		I     *model.Relationship
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *RelationshipInterfaceMock) Delete(ctx context.Context, f *firestore.Client, batch *firestore.WriteBatch, i *model.Relationship) {
	if mock.DeleteFunc == nil {
		panic("RelationshipInterfaceMock.DeleteFunc: method is nil but RelationshipInterface.Delete was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		F     *firestore.Client
		Batch *firestore.WriteBatch
		I     *model.Relationship
	}{
		Ctx:   ctx,
		F:     f,
		Batch: batch,
		I:     i,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	mock.DeleteFunc(ctx, f, batch, i)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedRelationshipInterface.DeleteCalls())
func (mock *RelationshipInterfaceMock) DeleteCalls() []struct {
	Ctx   context.Context
	F     *firestore.Client
	Batch *firestore.WriteBatch
	I     *model.Relationship
} {
	var calls []struct {
		Ctx   context.Context
		F     *firestore.Client
		Batch *firestore.WriteBatch
		I     *model.Relationship
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// FindByFollowedID calls FindByFollowedIDFunc.
func (mock *RelationshipInterfaceMock) FindByFollowedID(ctx context.Context, f *firestore.Client, userID string, first int, cursor repository.RelationshipCursor) ([]*model.Relationship, error) {
	if mock.FindByFollowedIDFunc == nil {
		panic("RelationshipInterfaceMock.FindByFollowedIDFunc: method is nil but RelationshipInterface.FindByFollowedID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		F      *firestore.Client
		UserID string
		First  int
		Cursor repository.RelationshipCursor
	}{
		Ctx:    ctx,
		F:      f,
		UserID: userID,
		First:  first,
		Cursor: cursor,
	}
	mock.lockFindByFollowedID.Lock()
	mock.calls.FindByFollowedID = append(mock.calls.FindByFollowedID, callInfo)
	mock.lockFindByFollowedID.Unlock()
	return mock.FindByFollowedIDFunc(ctx, f, userID, first, cursor)
}

// FindByFollowedIDCalls gets all the calls that were made to FindByFollowedID.
// Check the length with:
//     len(mockedRelationshipInterface.FindByFollowedIDCalls())
func (mock *RelationshipInterfaceMock) FindByFollowedIDCalls() []struct {
	Ctx    context.Context
	F      *firestore.Client
	UserID string
	First  int
	Cursor repository.RelationshipCursor
} {
	var calls []struct {
		Ctx    context.Context
		F      *firestore.Client
		UserID string
		First  int
		Cursor repository.RelationshipCursor
	}
	mock.lockFindByFollowedID.RLock()
	calls = mock.calls.FindByFollowedID
	mock.lockFindByFollowedID.RUnlock()
	return calls
}
