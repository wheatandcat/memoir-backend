// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package moqs

import (
	"cloud.google.com/go/firestore"
	"context"
	"github.com/wheatandcat/memoir-backend/repository"
	"sync"
)

// Ensure, that CommonRepositoryInterfaceMock does implement repository.CommonRepositoryInterface.
// If this is not the case, regenerate this file with moq.
var _ repository.CommonRepositoryInterface = &CommonRepositoryInterfaceMock{}

// CommonRepositoryInterfaceMock is a mock implementation of repository.CommonRepositoryInterface.
//
//	func TestSomethingThatUsesCommonRepositoryInterface(t *testing.T) {
//
//		// make and configure a mocked repository.CommonRepositoryInterface
//		mockedCommonRepositoryInterface := &CommonRepositoryInterfaceMock{
//			CommitFunc: func(ctx context.Context, batch *firestore.BulkWriter)  {
//				panic("mock out the Commit method")
//			},
//		}
//
//		// use mockedCommonRepositoryInterface in code that requires repository.CommonRepositoryInterface
//		// and then make assertions.
//
//	}
type CommonRepositoryInterfaceMock struct {
	// CommitFunc mocks the Commit method.
	CommitFunc func(ctx context.Context, batch *firestore.BulkWriter)

	// calls tracks calls to the methods.
	calls struct {
		// Commit holds details about calls to the Commit method.
		Commit []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Batch is the batch argument value.
			Batch *firestore.BulkWriter
		}
	}
	lockCommit sync.RWMutex
}

// Commit calls CommitFunc.
func (mock *CommonRepositoryInterfaceMock) Commit(ctx context.Context, batch *firestore.BulkWriter) {
	if mock.CommitFunc == nil {
		panic("CommonRepositoryInterfaceMock.CommitFunc: method is nil but CommonRepositoryInterface.Commit was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Batch *firestore.BulkWriter
	}{
		Ctx:   ctx,
		Batch: batch,
	}
	mock.lockCommit.Lock()
	mock.calls.Commit = append(mock.calls.Commit, callInfo)
	mock.lockCommit.Unlock()
	mock.CommitFunc(ctx, batch)
}

// CommitCalls gets all the calls that were made to Commit.
// Check the length with:
//
//	len(mockedCommonRepositoryInterface.CommitCalls())
func (mock *CommonRepositoryInterfaceMock) CommitCalls() []struct {
	Ctx   context.Context
	Batch *firestore.BulkWriter
} {
	var calls []struct {
		Ctx   context.Context
		Batch *firestore.BulkWriter
	}
	mock.lockCommit.RLock()
	calls = mock.calls.Commit
	mock.lockCommit.RUnlock()
	return calls
}
